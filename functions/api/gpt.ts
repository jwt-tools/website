import type { Env } from '../index';

export const onRequest: PagesFunction<Env> = async ({ request, env }) => {
  const token = new URL(request.url).searchParams.get('token');
  const init = {
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content:
            'You are a helpful chat assistant for a JWT debugger.  Your tone should be informational, expert, and educational. Your job is to help non-technical users understand the payload of JWTs as well as help developers learn more. \n\nYou should only answer questions about JWTs.  \n\nAt the end of the response, help the user learn that JWTs are important and its easy to make mistakes.  Always debug and test JWTs. \n\n Do not reference previous responses.\n\nIf the JWT has a bunch of claims, try to fit the entire response in 800 tokens. ',
        },
        {
          role: 'user',
          content:
            'Explain each of the parts of the payload. Please help me understand what is in this JSON Web Token. This is from a payload of a JWT.   \n\nNote: Please convert the Unix timestamp epochs to human readable time (for example, convert 1699333287 to Tue Nov 07 2023 05:01:27 GMT+0000).\n\nPlease break down this token so someone non-technical can understand it.\n\nExample: \n{  "jti": "db78eca6-950c-40c5-8ff1-8c44e6edc4e1",  \n"aud": [    "app:284636076242371085",    \n"https://api.rownd.io"  ],  \n"sub": "rownd|1bc236416bf75edba544", \n"iat": 1699307292,  \n "https://auth.rownd.io/is_verified_user": true, \n"iss": "https://api.rownd.io",\n "exp": 1699310892}',
        },
        {
          role: 'assistant',
          content:
            'Sure, let\'\'\'s break down the payload of this JSON Web Token (JWT):\n\n1. "jti": "db78eca6-950c-40c5-8ff1-8c44e6edc4e1"\n   - This is the "JWT ID" and it uniquely identifies the JWT. It is typically used to prevent token replay attacks.\n\n2. "aud": ["app:284636076242371085", "https://api.rownd.io"]\n   - This represents the intended audience of the JWT. It specifies who the token is intended for. In this case, it indicates that the token is meant for an application with ID "284636076242371085" and the API endpoint "https://api.rownd.io".\n\n3. "sub": "rownd|1bc236416bf75edba544"\n   - This is the "subject" of the token, representing the user or entity that the token is about. In this case, it seems to be a user identified with the value "rownd|1bc236416bf75edba544".\n\n4. "iat": 1699307292\n   - This stands for "issued at" and represents the timestamp (Unix epoch format) at which the token was issued. Converting it to human-readable form, it would be "Tue Nov 07 2023 05:01:32 GMT+0000".\n\n5. "https://auth.rownd.io/is_verified_user": true\n   - This is another custom claim, indicating that the user associated with the token is a verified user.\n\n6. "iss": "https://api.rownd.io"\n   - This stands for "issuer" and represents the entity (in this case, the API) that issued the JWT. It ensures that the token was generated by a trusted source.\n\n7. "exp": 1699310892\n   - This represents the expiration time of the JWT in Unix epoch format. Converting it to human-readable form, it would be "Tue Nov 07 2023 06:21:32 GMT+0000". Once this time is reached, the token is no longer considered valid.\n\nRemember that JWTs are important for securely transmitting information between parties. However, they can be complex to handle correctly. Solutions like Rownd can assist by simplifying and securing JWT management, ensuring that developers can focus on building their applications with increased efficiency and security.',
        },
        {
          role: 'user',
          content: `Great response.  Here is a different JWT Payload to breakdown:\n\n${token}`,
        },
      ],
      temperature: 1,
      max_tokens: 800,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    }),
    method: 'POST',
    headers: {
      'content-type': 'application/json',
      Authorization: `Bearer ${env.OPEN_AI_KEY}`,
    },
  };
  const response = await fetch(
    'https://api.openai.com/v1/chat/completions',
    init
  );

  const json = await response.json();

  const headers = new Headers();
  headers.append('content-type', 'application/json');

  return new Response(JSON.stringify(json), {
    status: 200,
    headers,
  });
};
